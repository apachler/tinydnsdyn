#!/usr/bin/python

# Copyright 2011 Felix Hanley <felix@seconddrawer.com.au>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as 
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301  USA

import sys
import os
import base64
import crypt
import urlparse
import SimpleHTTPServer
import SocketServer
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from SocketServer import ThreadingMixIn
import threading
from optparse import OptionParser

class RequestHandler(BaseHTTPRequestHandler):

    def headers_auth(self):
        self.send_header('Content-type', 'text/html')
        self.send_header('WWW-Authenticate', 'Basic realm=\"tinyDNSdyn\"')

    def headers_denied(self):
        self.send_response(401)
        self.headers_auth()

    def do_GET(self):
        self.auth = Authorizer()
        self.datafile = DataFile()
        response = 'nohost'
        hosts = []
        address = self.client_address[0]
        auth_header= self.headers.getheader('Authorization')
        # get query string
        path,_,query_str = self.path.partition('?')
        query = urlparse.parse_qs(query_str)
        # only accept index requests
        if path != '/':
            response = 'notfound'
            self.send_response(404)
        elif not auth_header:
            self.headers_denied()
            response = 'badauth'
        else:
            passhash = auth_header.replace('Basic ','',1).strip()
            username,password = base64.b64decode(passhash).split(':',1)
            if self.auth.check(username, password):
                if 'hostname' not in query:
                    response = 'notfqdn'
                else:
                    # use given ip address
                    if 'myip' in query: address = query['myip'][0]
                    # clean up all the hostnames
                    for hostlist in query['hostname']:
                        for hostname in hostlist.split(','):
                            hosts.append(hostname)
                    # update each hostname
                    for hostname in hosts:
                        if self.auth.check(username, password, hostname):
                            # make the changes to the file
                            result = self.datafile.update(address, hostname)
                            if result == 1:
                                response = 'good'
                            elif result == 0:
                                response = 'nochg'
                # successful
                self.send_response(200)

            else:
                self.headers_denied()
                response = 'badauth'

            self.datafile.commit()

        self.end_headers()
        print "client: %s, status: %s" % (address, response)
        self.wfile.write(response)


class Authorizer:
    """A class for manipulating htpasswd files."""

    def __init__(self):
        self.filename = options.passfile
        self.entries = []
        if os.path.exists(self.filename):
            lines = open(self.filename, 'r').readlines()
            for line in lines:
                entry = [x.strip() for x in line.split(':',2)]
                self.entries.append(entry)
        else:
            raise IOError("unable to find password file: %s" % self.filename)

    def check(self, username, password, fqdn=None):
        for entry in self.entries:
            if entry[0] == username:
                if entry[1] == crypt.crypt(password, entry[1]):
                    if fqdn == None or len(entry) == 2 or fqdn in entry[2].split(','):
                        return True

        return False


class DataFile:

    def __init__(self):
        self.changed = False
        self.lines = []
        self.datafile_path = os.path.join(options.root, "data")
        self.tmpfile_path = os.path.join(options.root, "data.tinydnsdyn.tmp")
        if os.path.exists(self.datafile_path):
            try: self.datafile = open(self.datafile_path,"r")
            except:
                raise IOError("unable to open tinydns data file: %s" %
                        self.datafile_path)

            try: self.tmpfile = open(self.tmpfile_path,"w")
            except:
                raise IOError("unable to create temporary data file: %s" %
                        tmpfile_path)
        else:
            raise IOError("unable to find data file: %s" % self.datafile_path)

    def update(self, address, hostname):
        result = -1
        for line in self.datafile:
            if line[0] in ['+','=']:
                fields = line.split(":",2)
                if len(fields) > 2:
                    ttl = fields[2]
                else:
                    ttl = options.ttl
                # i think these prefixes should work?!
                if fields[0].lstrip("+=.*") == hostname:
                    if fields[1] != address:
                        line = "%s:%s:%s\n" % (fields[0],address,ttl)
                        result = 1
                        self.changed = True
                    else:
                        result = 0
            self.tmpfile.write(line)
        self.tmpfile.close()
        return result

    def commit(self):
        # overwrite data file with temp one
        if self.changed:
            try:
                os.rename(self.tmpfile_path, self.datafile_path)
            except:
                raise IOError("unable to overwrite data file: %s" %
                        self.datafile_path)
            # now run the tinydns-data prog
            errno = os.system("cd %s && make -s" % options.root)
            if errno != 0:
                raise EnvironmentError("problem executing Makefile")
        else:
            os.remove(self.tmpfile_path)
    

def main():

    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage)
    parser.add_option("-r", "--root", dest="root",
            help="absolute path to the tinydns data directory")
    parser.add_option("-t", "--ttl", dest="ttl",
            help="default TTL (default: 3600)")
    parser.add_option("-a", "--address", dest="address",
            help="the address to bind to (default: all)")
    parser.add_option("-p", "--port", dest="port",
            help="the port to listen on (default: 5353)")
    parser.add_option("-f", "--passfile", dest="passfile",
            help="the password file (default: htpasswd)")

    # defaults
    parser.set_defaults(root="/var/services/tinydns/root", address='',
            port=5353, ttl=3600, passfile='/var/services/tinydns/htpasswd')
    global options
    (options, args) = parser.parse_args()


    httpd = HTTPServer((options.address, options.port), RequestHandler)
    httpd.serve_forever()


if __name__ == "__main__":
    try: main()
    except Exception as strerror:
        print "tinydnsdyn: %s" % format(strerror)
