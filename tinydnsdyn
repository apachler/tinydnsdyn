#!/usr/bin/python

# Copyright 2011 Felix Hanley <felix@seconddrawer.com.au>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2, as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301  USA
#
# 2016.10.03  OE8APR   Added SSL support
# 2016.10.06  OE8APR   Added MySQL user check against Dolphin profiles (used for www.socialhams.net)
#

import sys
import os
import base64
import crypt
import urlparse
import BaseHTTPServer, SimpleHTTPServer
import ssl
import SocketServer
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
from SocketServer import ThreadingMixIn
import threading
from optparse import OptionParser
import MySQLdb as mdb
import hashlib
import datetime

class RequestHandler(BaseHTTPRequestHandler):
    """handle requests to BaseHTTPServer"""

    def headers_denied(self):
        self.send_response(401)
        self.send_header('Content-type', 'text/html')
        self.send_header('WWW-Authenticate', 'Basic realm=\"tinyDNSdyn\"')

    def do_GET(self):
        self.auth = Authorizer()
        self.datafile = DataFile()

        response = 'nohost'
        hosts = []
        address = self.client_address[0]
        auth_header= self.headers.getheader('Authorization')
        # get query string
        path,_,query_str = self.path.partition('?')
        query = urlparse.parse_qs(query_str)
        # only accept index requests
        if path != '/':
            response = 'notfound'
            self.send_response(404)
        elif not auth_header:
            self.headers_denied()
            response = 'badauth'
        else:
            passhash = auth_header.replace('Basic ','',1).strip()
            username,password = base64.b64decode(passhash).split(':',1)
            if self.auth.check(username, password):
                if 'hostname' not in query:
                    response = 'notfqdn'
                else:
                    # use given ip address?
                    if 'myip' in query: address = query['myip'][0]
                    # clean up all the hostnames
                    for hostlist in query['hostname']:
                        for hostname in hostlist.split(','):
                            hosts.append(hostname)
                    # update each hostname
                    for hostname in hosts:
                        if self.auth.check(username, password, hostname):
                            # make the changes to the file
                            result = self.datafile.update(address, hostname)
                            if result == 1:
                                response = 'good'
                            elif result == 0:
                                response = 'nochg'
                # successful
                self.send_response(200)

            else:
                self.headers_denied()
                response = 'badauth'

            self.datafile.commit()

        self.end_headers()
        self.wfile.write(response)
        sys.stderr.write("client: %s, status: %s\n" % (address, response))


class Authorizer:
    """Authorise the user using htpasswd file"""

    def __init__(self):
        self.filename = options.passfile
        self.entries = []
        lines = open(self.filename, 'r').readlines()
        for line in lines:
            entry = [x.strip() for x in line.split(':',2)]
            self.entries.append(entry)

    def check(self, username, password, fqdn=None):
        # first check if user is defined in the database
        self.dolphin = Dolphin()
        if self.dolphin.check(username, password):
            return True

        for entry in self.entries:
            if entry[0] == username:
                if entry[1] == crypt.crypt(password, entry[1]):
                    if fqdn == None or len(entry) == 2 or fqdn in entry[2].split(','):
                        return True

        return False


class DataFile:
    """Read and write the data file"""

    def __init__(self):
        self.changed = False
        self.lines = []
        self.datafile_path = os.path.join(options.datafile)
        self.tmpfile_path = os.path.join(options.root, "data.tinydnsdyn.tmp")
        self.datafile = open(self.datafile_path,"r")
        self.tmpfile = open(self.tmpfile_path,"w")

    def update(self, address, hostname):
        """update the temporary data file"""

        result = -1
        for line in self.datafile:
            if line[0] in ['+','=']:
                fields = line.split(":",3)
                # i think these prefixes should work?!
                if fields[0].lstrip("+=.*") == hostname:
                    # default ttl?
                    if len(fields) > 2:
                        tail = fields[2]
                    else:
                        tail = options.ttl

                    # retain the tail
                    if len(fields) > 3:
                        tail += ':' + fields[3]

                    if fields[1] != address:
                        line = "%s:%s:%s" % (fields[0],address,tail)
                        result = 1
                        self.changed = True
                    else:
                        result = 0
            self.tmpfile.write(line)
        self.tmpfile.close()
        return result

    def commit(self):
        """overwrite data file with temp one"""
        if self.changed:
            os.rename(self.tmpfile_path, self.datafile_path)
            # now run the tinydns-data prog
            errno = os.system("cd %s && make -s" % options.root)
            if errno != 0:
                raise RuntimeError("problem executing Makefile")

    def __del__(self):
        try: os.remove(self.tmpfile_path)
        except: pass

class Dolphin:
    """check if user is allowed to update dns entries"""

    def __init__(self):
        self.host = options.mysql_host
        self.db = options.mysql_db
        self.user = options.mysql_user
        self.password = options.mysql_password
        self.level = options.dolphin_level

    def check(self, user, password):
        if self.db is not None:
            con = mdb.connect(self.host, self.user, self.password, self.db)

            with con:
                user = con.escape_string(user)
                password = con.escape_string(password)

                cur = con.cursor()

                # get salt from DB
                cur.execute("SELECT `Salt` FROM `Profiles` WHERE `NickName` = '" + user + "'")
                row = cur.fetchone()
                salt = str(row[0])
                # DEBUG print "Salt is " + str(salt)

                # generate password hash and check if it equals users password in DB
                passwordmd5 = hashlib.md5(password).hexdigest()
                passwordsha1 = hashlib.sha1(passwordmd5+salt).hexdigest()
                # DEBUG print "Password sha is " + passwordsha1

                now = datetime.datetime.now()
                f = '%Y-%m-%d %H:%M:%S'
                cur.execute("SELECT `ID` FROM `Profiles` as p, `sys_acl_levels_members` as l WHERE p.`NickName` = '" + user + "' AND p.`Password` = '" + passwordsha1 + "' AND p.`ID` = l.`IDMember` AND l.`IDLevel` >= " + str(self.level) + " AND (l.`DateExpires` > '" + now.strftime(f) + "' OR l.`DateExpires` IS NULL)")
                id = cur.fetchone()

                if id is not None:
                    print "User found with UserID " + str(id[0]) + " in Dolphin database"
                    return True

            return False

def main():
    usage = "usage: %prog [options]"
    parser = OptionParser(usage=usage)
    parser.add_option("-r", "--root", dest="root",
            help="absolute path to the tinydns data directory (default: /var/cache/tinydns)")
    parser.add_option("-d", "--datafile", dest="datafile",
            help="absolute path to the data file to update (default: /etc/tinydns/ddns.socialhams.net)")
    parser.add_option("-t", "--ttl", dest="ttl",
            help="default TTL (default: 60)")
    parser.add_option("-a", "--address", dest="address",
            help="the address to bind to (default: all)")
    parser.add_option("-s", "--ssl", dest="ssl",
            help="yes/no to use HTTPS connection (default: yes)")
    parser.add_option("-l", "--listen", dest="port",
            help="the port to listen on (default: 80/443 depends on --ssl)")
    parser.add_option("-f", "--passfile", dest="passfile",
            help="the password file (default: /home/tinydns/tinydnsdyn.passwords)")
    parser.add_option("-c", "--certfile", dest="passfile",
            help="the ssl cert file (default: /home/tinydns/tinydnsdyn.cert)")
    parser.add_option("-m", "--mysql_host", dest="mysql_host",
            help="ip or hostname of mysql server (default: localhost)")
    parser.add_option("-b", "--mysql_db", dest="mysql_db",
            help="name of mysql database")
    parser.add_option("-u", "--mysql_user", dest="mysql_user",
            help="username for accessing database")
    parser.add_option("-p", "--mysql_password", dest="mysql_password",
            help="password for accessing database")
    parser.add_option("-e", "--dolphin_level", dest="dolphin_level",
            help="Dolphin user level needed (default: 7)")

    # defaults
    parser.set_defaults(root='/var/cache/tinydns', address='', ssl='no',
            datafile='/etc/tinydns/ddns.socialhams.net', port=80, ttl=60,
            passfile='/home/tinydns/tinydnsdyn.passwords',
            certfile='/home/tinydns/tinydnsdyn.cert',
            mysql_host='localhost', dolphin_level=7)
    global options
    (options, args) = parser.parse_args()

    if options.ssl == 'yes':
            if options.port == 80:
                    options.port = 443
            httpd = BaseHTTPServer.HTTPServer((options.address, int(options.port)), RequestHandler)
            httpd.socket = ssl.wrap_socket (httpd.socket, certfile=options.certfile, server_side=True)
            httpd.serve_forever()
    else:
            httpd = HTTPServer((options.address, int(options.port)), RequestHandler)
            httpd.serve_forever()

if __name__ == "__main__":
    main()
